import asyncio

from asyncio_learning.util import delay


def call_later():
    print("Меня вызовут в ближайшем будущем!")


async def main():
    loop = asyncio.get_running_loop()
    loop.call_soon(call_later)
    await delay(1)


asyncio.run(main())


"""
Иногда бывает необходим доступ к текущему циклу событий. Библио-
тека asyncio предоставляет для этой цели функцию asyncio.get_run-
ning_loop. В качестве примера рассмотрим метод call_soon, который
планирует выполнение функции на следующей итерации цикла со-
бытий.
Здесь сопрограмма main получает цикл событий от функции asyn-
cio.get_running_loop, и вызывает его метод call_later, который при-
нимает функцию и выполняет ее на следующей итерации цикла. Су-
ществует еще функция asyncio.get_event_loop, также позволяющая
получить доступ к циклу событий. Эта функция может создать новый
цикл событий, если его еще не существует в момент вызова, что ведет
к странному поведению. Рекомендуется использовать get_running_
loop, поскольку она возбуждает исключение, если цикл событий не
запущен, что позволяет избежать сюрпризов.
Хотя явно использовать цикл событий в приложениях слишком
часто не стоит, бывает, что нужно настроить его параметры или вос-
пользоваться низкоуровневыми функциями. В следующем разде-
ле мы рассмотрим пример перевода цикла событий в отладочный
режим.
"""