"""
Резюме
Мы научились создавать сопрограммы с помощью ключевого слова
async. Сопрограмма может приостанавливать себя, встретив бло-
кирующую операцию. Это дает возможность поработать другим
сопрограммам. После завершения операции, на которой сопро-
грамма приостановилась, она пробуждается и продолжает работу
с прерванного места.

Мы узнали, что вызову сопрограммы должно предшествовать клю-
чевое слово await, означающее, что нужно дождаться возврата зна-
чения. При этом сопрограмма, внутри которой встретилось слово
await, приостанавливается в ожидании результата. В это время мо-
гут работать другие сопрограммы.

Мы узнали, как использовать функцию asyncio.run для выполне-
ния одной сопрограммы, являющейся точкой входа в приложение.

Мы научились использовать задачи для конкурентного выполне-
ния нескольких длительных операций. Задачи – это обертки вокруг
сопрограмм, которые исполняются в цикле событий. Созданная за-
дача планируется для выполнения как можно раньше.

Мы узнали, как снимать задачу, когда нужно остановить ее, и как
задать тайм-аут, чтобы задача не работала бесконечно долго. После
снятия задачи возбуждается исключение CancelledError, когда мы
ожидаем результат. Если имеются ограничения на время работы
задачи, то можно задать тайм-аут в методе asycio.wait_for.

Мы научились избегать типичных ошибок, которые допускают на-
чинающие изучать asyncio. Первая – выполнение счетного кода
в сопрограммах. Счетный код блокирует цикл событий и не дает
выполняться другим сопрограммам, потому что модель конкурент-
ности однопоточная. Вторая – блокирующий ввод-вывод, потому
что обычные библиотеки нельзя использовать совместно с asyncio,
а нужно работать с заточенными под asyncio и возвращающими со-
программы. Если внутри вашей сопрограммы не встречается await,
это должно вызвать подозрения. Тем не менее существуют спосо-
бы исполнять счетный код и блокирующий ввод-вывод совместно
с asyncio, мы рассмотрим их в главах 6 и 7.

Мы узнали об отладочном режиме. Он помогает диагностировать
типичные проблемы в коде на основе asyncio, например выполне-
ние счетного кода в сопрограмме.

"""